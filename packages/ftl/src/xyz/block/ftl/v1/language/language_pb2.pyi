"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing
import xyz.block.ftl.v1.schema.schema_pb2

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ModuleConfig(google.protobuf.message.Message):
    """ModuleConfig contains the configuration for a module, found in the module's ftl.toml file."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DIR_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    DEPLOY_DIR_FIELD_NUMBER: builtins.int
    BUILD_FIELD_NUMBER: builtins.int
    BUILD_LOCK_FIELD_NUMBER: builtins.int
    GENERATED_SCHEMA_DIR_FIELD_NUMBER: builtins.int
    WATCH_FIELD_NUMBER: builtins.int
    LANGUAGE_CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the module"""
    dir: builtins.str
    """Absolute path to the module's directory"""
    language: builtins.str
    """The language of the module"""
    deploy_dir: builtins.str
    """Absolute path to the directory containing all of this module's build artifacts for deployments"""
    build: builtins.str
    """Build is the command to build the module."""
    build_lock: builtins.str
    """Build lock path to prevent concurrent builds"""
    generated_schema_dir: builtins.str
    """The directory to generate protobuf schema files into. These can be picked up by language specific build tools"""
    @property
    def watch(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Patterns to watch for file changes"""

    @property
    def language_config(self) -> google.protobuf.struct_pb2.Struct:
        """LanguageConfig contains any metadata specific to a specific language.
        These are stored in the ftl.toml file under the same key as the language (eg: "go", "java")
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        dir: builtins.str = ...,
        language: builtins.str = ...,
        deploy_dir: builtins.str = ...,
        build: builtins.str | None = ...,
        build_lock: builtins.str = ...,
        generated_schema_dir: builtins.str | None = ...,
        watch: collections.abc.Iterable[builtins.str] | None = ...,
        language_config: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_build", b"_build", "_generated_schema_dir", b"_generated_schema_dir", "build", b"build", "generated_schema_dir", b"generated_schema_dir", "language_config", b"language_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_build", b"_build", "_generated_schema_dir", b"_generated_schema_dir", "build", b"build", "build_lock", b"build_lock", "deploy_dir", b"deploy_dir", "dir", b"dir", "generated_schema_dir", b"generated_schema_dir", "language", b"language", "language_config", b"language_config", "name", b"name", "watch", b"watch"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_build", b"_build"]) -> typing.Literal["build"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_generated_schema_dir", b"_generated_schema_dir"]) -> typing.Literal["generated_schema_dir"] | None: ...

global___ModuleConfig = ModuleConfig

@typing.final
class ProjectConfig(google.protobuf.message.Message):
    """ProjectConfig contains the configuration for a project, found in the ftl-project.toml file."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIR_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NO_GIT_FIELD_NUMBER: builtins.int
    HERMIT_FIELD_NUMBER: builtins.int
    dir: builtins.str
    name: builtins.str
    no_git: builtins.bool
    hermit: builtins.bool
    def __init__(
        self,
        *,
        dir: builtins.str = ...,
        name: builtins.str = ...,
        no_git: builtins.bool = ...,
        hermit: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dir", b"dir", "hermit", b"hermit", "name", b"name", "no_git", b"no_git"]) -> None: ...

global___ProjectConfig = ProjectConfig

@typing.final
class GetCreateModuleFlagsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_FIELD_NUMBER: builtins.int
    language: builtins.str
    def __init__(
        self,
        *,
        language: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["language", b"language"]) -> None: ...

global___GetCreateModuleFlagsRequest = GetCreateModuleFlagsRequest

@typing.final
class GetCreateModuleFlagsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Flag(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        HELP_FIELD_NUMBER: builtins.int
        ENVAR_FIELD_NUMBER: builtins.int
        SHORT_FIELD_NUMBER: builtins.int
        PLACEHOLDER_FIELD_NUMBER: builtins.int
        DEFAULT_FIELD_NUMBER: builtins.int
        name: builtins.str
        help: builtins.str
        envar: builtins.str
        short: builtins.str
        """short must be a single character"""
        placeholder: builtins.str
        default: builtins.str
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            help: builtins.str = ...,
            envar: builtins.str | None = ...,
            short: builtins.str | None = ...,
            placeholder: builtins.str | None = ...,
            default: builtins.str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["_default", b"_default", "_envar", b"_envar", "_placeholder", b"_placeholder", "_short", b"_short", "default", b"default", "envar", b"envar", "placeholder", b"placeholder", "short", b"short"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["_default", b"_default", "_envar", b"_envar", "_placeholder", b"_placeholder", "_short", b"_short", "default", b"default", "envar", b"envar", "help", b"help", "name", b"name", "placeholder", b"placeholder", "short", b"short"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_default", b"_default"]) -> typing.Literal["default"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_envar", b"_envar"]) -> typing.Literal["envar"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_placeholder", b"_placeholder"]) -> typing.Literal["placeholder"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing.Literal["_short", b"_short"]) -> typing.Literal["short"] | None: ...

    FLAGS_FIELD_NUMBER: builtins.int
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetCreateModuleFlagsResponse.Flag]: ...
    def __init__(
        self,
        *,
        flags: collections.abc.Iterable[global___GetCreateModuleFlagsResponse.Flag] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["flags", b"flags"]) -> None: ...

global___GetCreateModuleFlagsResponse = GetCreateModuleFlagsResponse

@typing.final
class CreateModuleRequest(google.protobuf.message.Message):
    """Request to create a new module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DIR_FIELD_NUMBER: builtins.int
    PROJECT_CONFIG_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    name: builtins.str
    dir: builtins.str
    """The root directory for the module, which does not yet exist.
    The plugin should create the directory.
    """
    @property
    def project_config(self) -> global___ProjectConfig:
        """The project configuration"""

    @property
    def Flags(self) -> google.protobuf.struct_pb2.Struct:
        """Flags contains any values set for those configured in the GetCreateModuleFlags call"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        dir: builtins.str = ...,
        project_config: global___ProjectConfig | None = ...,
        Flags: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["Flags", b"Flags", "project_config", b"project_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["Flags", b"Flags", "dir", b"dir", "name", b"name", "project_config", b"project_config"]) -> None: ...

global___CreateModuleRequest = CreateModuleRequest

@typing.final
class CreateModuleResponse(google.protobuf.message.Message):
    """Response to a create module request."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___CreateModuleResponse = CreateModuleResponse

@typing.final
class ModuleConfigDefaultsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIR_FIELD_NUMBER: builtins.int
    dir: builtins.str
    def __init__(
        self,
        *,
        dir: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dir", b"dir"]) -> None: ...

global___ModuleConfigDefaultsRequest = ModuleConfigDefaultsRequest

@typing.final
class ModuleConfigDefaultsResponse(google.protobuf.message.Message):
    """ModuleConfigDefaultsResponse provides defaults for ModuleConfig.

    The result may be cached by FTL, so defaulting logic should not be changing due to normal module changes.
    For example, it is valid to return defaults based on which build tool is configured within the module directory,
    as that is not expected to change during normal operation.
    It is not recommended to read the module's toml file to determine defaults, as when the toml file is updated,
    the module defaults will not be recalculated.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEPLOY_DIR_FIELD_NUMBER: builtins.int
    BUILD_FIELD_NUMBER: builtins.int
    BUILD_LOCK_FIELD_NUMBER: builtins.int
    GENERATED_SCHEMA_DIR_FIELD_NUMBER: builtins.int
    WATCH_FIELD_NUMBER: builtins.int
    LANGUAGE_CONFIG_FIELD_NUMBER: builtins.int
    deploy_dir: builtins.str
    """Default relative path to the directory containing all build artifacts for deployments"""
    build: builtins.str
    """Default build command"""
    build_lock: builtins.str
    """Build lock path to prevent concurrent builds"""
    generated_schema_dir: builtins.str
    """Default relative path to the directory containing generated schema files"""
    @property
    def watch(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Default patterns to watch for file changes, relative to the module directory"""

    @property
    def language_config(self) -> google.protobuf.struct_pb2.Struct:
        """Default language specific configuration.
        These defaults are filled in by looking at each root key only. If the key is not present, the default is used.
        """

    def __init__(
        self,
        *,
        deploy_dir: builtins.str = ...,
        build: builtins.str | None = ...,
        build_lock: builtins.str | None = ...,
        generated_schema_dir: builtins.str | None = ...,
        watch: collections.abc.Iterable[builtins.str] | None = ...,
        language_config: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_build", b"_build", "_build_lock", b"_build_lock", "_generated_schema_dir", b"_generated_schema_dir", "build", b"build", "build_lock", b"build_lock", "generated_schema_dir", b"generated_schema_dir", "language_config", b"language_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_build", b"_build", "_build_lock", b"_build_lock", "_generated_schema_dir", b"_generated_schema_dir", "build", b"build", "build_lock", b"build_lock", "deploy_dir", b"deploy_dir", "generated_schema_dir", b"generated_schema_dir", "language_config", b"language_config", "watch", b"watch"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_build", b"_build"]) -> typing.Literal["build"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_build_lock", b"_build_lock"]) -> typing.Literal["build_lock"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_generated_schema_dir", b"_generated_schema_dir"]) -> typing.Literal["generated_schema_dir"] | None: ...

global___ModuleConfigDefaultsResponse = ModuleConfigDefaultsResponse

@typing.final
class DependenciesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODULE_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def module_config(self) -> global___ModuleConfig: ...
    def __init__(
        self,
        *,
        module_config: global___ModuleConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["module_config", b"module_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["module_config", b"module_config"]) -> None: ...

global___DependenciesRequest = DependenciesRequest

@typing.final
class DependenciesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODULES_FIELD_NUMBER: builtins.int
    @property
    def modules(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        modules: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["modules", b"modules"]) -> None: ...

global___DependenciesResponse = DependenciesResponse

@typing.final
class BuildContext(google.protobuf.message.Message):
    """BuildContext contains contextual information needed to build.

    Plugins must include the build context's id when a build succeeds or fails.
    For automatic rebuilds, plugins must use the most recent build context they have received.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    MODULE_CONFIG_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    DEPENDENCIES_FIELD_NUMBER: builtins.int
    id: builtins.str
    @property
    def module_config(self) -> global___ModuleConfig:
        """The configuration for the module"""

    @property
    def schema(self) -> xyz.block.ftl.v1.schema.schema_pb2.Schema:
        """The FTL schema including all dependencies"""

    @property
    def dependencies(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The dependencies for the module"""

    def __init__(
        self,
        *,
        id: builtins.str = ...,
        module_config: global___ModuleConfig | None = ...,
        schema: xyz.block.ftl.v1.schema.schema_pb2.Schema | None = ...,
        dependencies: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["module_config", b"module_config", "schema", b"schema"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dependencies", b"dependencies", "id", b"id", "module_config", b"module_config", "schema", b"schema"]) -> None: ...

global___BuildContext = BuildContext

@typing.final
class BuildContextUpdatedRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BUILDCONTEXT_FIELD_NUMBER: builtins.int
    @property
    def buildContext(self) -> global___BuildContext: ...
    def __init__(
        self,
        *,
        buildContext: global___BuildContext | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["buildContext", b"buildContext"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["buildContext", b"buildContext"]) -> None: ...

global___BuildContextUpdatedRequest = BuildContextUpdatedRequest

@typing.final
class BuildContextUpdatedResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___BuildContextUpdatedResponse = BuildContextUpdatedResponse

@typing.final
class Error(google.protobuf.message.Message):
    """Error contains information about an error that occurred during a build.
    Errors do not always cause a build failure. Use lesser levels to help guide the user.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ErrorLevel:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ErrorLevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Error._ErrorLevel.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        INFO: Error._ErrorLevel.ValueType  # 0
        WARN: Error._ErrorLevel.ValueType  # 1
        ERROR: Error._ErrorLevel.ValueType  # 2

    class ErrorLevel(_ErrorLevel, metaclass=_ErrorLevelEnumTypeWrapper): ...
    INFO: Error.ErrorLevel.ValueType  # 0
    WARN: Error.ErrorLevel.ValueType  # 1
    ERROR: Error.ErrorLevel.ValueType  # 2

    MSG_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    POS_FIELD_NUMBER: builtins.int
    msg: builtins.str
    level: global___Error.ErrorLevel.ValueType
    @property
    def pos(self) -> global___Position: ...
    def __init__(
        self,
        *,
        msg: builtins.str = ...,
        level: global___Error.ErrorLevel.ValueType = ...,
        pos: global___Position | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pos", b"pos"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["level", b"level", "msg", b"msg", "pos", b"pos"]) -> None: ...

global___Error = Error

@typing.final
class Position(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILENAME_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    STARTCOLUMN_FIELD_NUMBER: builtins.int
    ENDCOLUMN_FIELD_NUMBER: builtins.int
    filename: builtins.str
    line: builtins.int
    startColumn: builtins.int
    endColumn: builtins.int
    def __init__(
        self,
        *,
        filename: builtins.str = ...,
        line: builtins.int = ...,
        startColumn: builtins.int = ...,
        endColumn: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["endColumn", b"endColumn", "filename", b"filename", "line", b"line", "startColumn", b"startColumn"]) -> None: ...

global___Position = Position

@typing.final
class ErrorList(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Error]: ...
    def __init__(
        self,
        *,
        errors: collections.abc.Iterable[global___Error] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["errors", b"errors"]) -> None: ...

global___ErrorList = ErrorList

@typing.final
class BuildRequest(google.protobuf.message.Message):
    """Request to build a module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROJECT_ROOT_FIELD_NUMBER: builtins.int
    STUBS_ROOT_FIELD_NUMBER: builtins.int
    REBUILD_AUTOMATICALLY_FIELD_NUMBER: builtins.int
    BUILD_CONTEXT_FIELD_NUMBER: builtins.int
    project_root: builtins.str
    """The root path for the FTL project"""
    stubs_root: builtins.str
    """The path to the directory containing all module stubs. Each module stub is in a subdirectory."""
    rebuild_automatically: builtins.bool
    """Indicates whether to watch for file changes and automatically rebuild"""
    @property
    def build_context(self) -> global___BuildContext: ...
    def __init__(
        self,
        *,
        project_root: builtins.str = ...,
        stubs_root: builtins.str = ...,
        rebuild_automatically: builtins.bool = ...,
        build_context: global___BuildContext | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["build_context", b"build_context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["build_context", b"build_context", "project_root", b"project_root", "rebuild_automatically", b"rebuild_automatically", "stubs_root", b"stubs_root"]) -> None: ...

global___BuildRequest = BuildRequest

@typing.final
class AutoRebuildStarted(google.protobuf.message.Message):
    """AutoRebuildStarted should be sent when the plugin decides to start rebuilding automatically.

    It is not required to send this event, though it helps inform the user that their changes are not yet built.
    FTL may ignore this event if it does not match FTL's current build context and state.
    If the plugin decides to cancel the build because another build started, no failure or cancellation event needs
    to be sent.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTEXT_ID_FIELD_NUMBER: builtins.int
    context_id: builtins.str
    def __init__(
        self,
        *,
        context_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["context_id", b"context_id"]) -> None: ...

global___AutoRebuildStarted = AutoRebuildStarted

@typing.final
class BuildSuccess(google.protobuf.message.Message):
    """BuildSuccess should be sent when a build succeeds.

    FTL may ignore this event if it does not match FTL's current build context and state.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTEXT_ID_FIELD_NUMBER: builtins.int
    IS_AUTOMATIC_REBUILD_FIELD_NUMBER: builtins.int
    MODULE_FIELD_NUMBER: builtins.int
    DEPLOY_FIELD_NUMBER: builtins.int
    DOCKER_IMAGE_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    context_id: builtins.str
    """The id of build context used while building."""
    is_automatic_rebuild: builtins.bool
    """Indicates whether the build was automatically started by the plugin, rather than due to a Build rpc call."""
    docker_image: builtins.str
    """Name of the docker image to use for the runner"""
    @property
    def module(self) -> xyz.block.ftl.v1.schema.schema_pb2.Module:
        """Module schema for the built module"""

    @property
    def deploy(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Paths for files/directories to be deployed"""

    @property
    def errors(self) -> global___ErrorList:
        """Errors contains any errors that occurred during the build
        No errors can have a level of ERROR, instead a BuildFailure should be sent
        Instead this is useful for INFO and WARN level errors.
        """

    def __init__(
        self,
        *,
        context_id: builtins.str = ...,
        is_automatic_rebuild: builtins.bool = ...,
        module: xyz.block.ftl.v1.schema.schema_pb2.Module | None = ...,
        deploy: collections.abc.Iterable[builtins.str] | None = ...,
        docker_image: builtins.str = ...,
        errors: global___ErrorList | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["errors", b"errors", "module", b"module"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["context_id", b"context_id", "deploy", b"deploy", "docker_image", b"docker_image", "errors", b"errors", "is_automatic_rebuild", b"is_automatic_rebuild", "module", b"module"]) -> None: ...

global___BuildSuccess = BuildSuccess

@typing.final
class BuildFailure(google.protobuf.message.Message):
    """BuildFailure should be sent when a build fails.

    FTL may ignore this event if it does not match FTL's current build context and state.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTEXT_ID_FIELD_NUMBER: builtins.int
    IS_AUTOMATIC_REBUILD_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    INVALIDATE_DEPENDENCIES_FIELD_NUMBER: builtins.int
    context_id: builtins.str
    """The id of build context used while building."""
    is_automatic_rebuild: builtins.bool
    """Indicates whether the build was automatically started by the plugin, rather than due to a Build rpc call."""
    invalidate_dependencies: builtins.bool
    """Indicates the plugin determined that the dependencies in the BuildContext are out of date.
    If a Build stream is being kept open for automatic rebuilds, FTL will call GetDependencies, followed by
    BuildContextUpdated.
    """
    @property
    def errors(self) -> global___ErrorList:
        """Errors contains any errors that occurred during the build"""

    def __init__(
        self,
        *,
        context_id: builtins.str = ...,
        is_automatic_rebuild: builtins.bool = ...,
        errors: global___ErrorList | None = ...,
        invalidate_dependencies: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["errors", b"errors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["context_id", b"context_id", "errors", b"errors", "invalidate_dependencies", b"invalidate_dependencies", "is_automatic_rebuild", b"is_automatic_rebuild"]) -> None: ...

global___BuildFailure = BuildFailure

@typing.final
class LogMessage(google.protobuf.message.Message):
    """Log message from the language service."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _LogLevel:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _LogLevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[LogMessage._LogLevel.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DEBUG: LogMessage._LogLevel.ValueType  # 0
        INFO: LogMessage._LogLevel.ValueType  # 1
        WARN: LogMessage._LogLevel.ValueType  # 2
        ERROR: LogMessage._LogLevel.ValueType  # 3

    class LogLevel(_LogLevel, metaclass=_LogLevelEnumTypeWrapper): ...
    DEBUG: LogMessage.LogLevel.ValueType  # 0
    INFO: LogMessage.LogLevel.ValueType  # 1
    WARN: LogMessage.LogLevel.ValueType  # 2
    ERROR: LogMessage.LogLevel.ValueType  # 3

    MESSAGE_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    message: builtins.str
    level: global___LogMessage.LogLevel.ValueType
    def __init__(
        self,
        *,
        message: builtins.str = ...,
        level: global___LogMessage.LogLevel.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["level", b"level", "message", b"message"]) -> None: ...

global___LogMessage = LogMessage

@typing.final
class BuildEvent(google.protobuf.message.Message):
    """Every type of message that can be streamed from the language plugin for a build."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUTO_REBUILD_STARTED_FIELD_NUMBER: builtins.int
    BUILD_SUCCESS_FIELD_NUMBER: builtins.int
    BUILD_FAILURE_FIELD_NUMBER: builtins.int
    LOG_MESSAGE_FIELD_NUMBER: builtins.int
    @property
    def auto_rebuild_started(self) -> global___AutoRebuildStarted: ...
    @property
    def build_success(self) -> global___BuildSuccess: ...
    @property
    def build_failure(self) -> global___BuildFailure: ...
    @property
    def log_message(self) -> global___LogMessage: ...
    def __init__(
        self,
        *,
        auto_rebuild_started: global___AutoRebuildStarted | None = ...,
        build_success: global___BuildSuccess | None = ...,
        build_failure: global___BuildFailure | None = ...,
        log_message: global___LogMessage | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["auto_rebuild_started", b"auto_rebuild_started", "build_failure", b"build_failure", "build_success", b"build_success", "event", b"event", "log_message", b"log_message"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["auto_rebuild_started", b"auto_rebuild_started", "build_failure", b"build_failure", "build_success", b"build_success", "event", b"event", "log_message", b"log_message"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["event", b"event"]) -> typing.Literal["auto_rebuild_started", "build_success", "build_failure", "log_message"] | None: ...

global___BuildEvent = BuildEvent

@typing.final
class GenerateStubsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIR_FIELD_NUMBER: builtins.int
    MODULE_FIELD_NUMBER: builtins.int
    MODULE_CONFIG_FIELD_NUMBER: builtins.int
    NATIVE_MODULE_CONFIG_FIELD_NUMBER: builtins.int
    dir: builtins.str
    """The directory path to generate stubs into"""
    @property
    def module(self) -> xyz.block.ftl.v1.schema.schema_pb2.Module:
        """The schema of the module to generate stubs for"""

    @property
    def module_config(self) -> global___ModuleConfig:
        """The module's configuration to generate stubs for"""

    @property
    def native_module_config(self) -> global___ModuleConfig:
        """Native module configuration is the configuration for a module that uses the plugin's language, if
        the main moduleConfig provided is of a different language. It is provided as a mechanism to derive
        language specific information. For example, the language version.
        """

    def __init__(
        self,
        *,
        dir: builtins.str = ...,
        module: xyz.block.ftl.v1.schema.schema_pb2.Module | None = ...,
        module_config: global___ModuleConfig | None = ...,
        native_module_config: global___ModuleConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_native_module_config", b"_native_module_config", "module", b"module", "module_config", b"module_config", "native_module_config", b"native_module_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_native_module_config", b"_native_module_config", "dir", b"dir", "module", b"module", "module_config", b"module_config", "native_module_config", b"native_module_config"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_native_module_config", b"_native_module_config"]) -> typing.Literal["native_module_config"] | None: ...

global___GenerateStubsRequest = GenerateStubsRequest

@typing.final
class GenerateStubsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___GenerateStubsResponse = GenerateStubsResponse

@typing.final
class SyncStubReferencesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODULE_CONFIG_FIELD_NUMBER: builtins.int
    STUBS_ROOT_FIELD_NUMBER: builtins.int
    MODULES_FIELD_NUMBER: builtins.int
    stubs_root: builtins.str
    """The path of the directory containing all module stubs. Each module is in a subdirectory"""
    @property
    def module_config(self) -> global___ModuleConfig: ...
    @property
    def modules(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The names of all modules that have had stubs generated"""

    def __init__(
        self,
        *,
        module_config: global___ModuleConfig | None = ...,
        stubs_root: builtins.str = ...,
        modules: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["module_config", b"module_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["module_config", b"module_config", "modules", b"modules", "stubs_root", b"stubs_root"]) -> None: ...

global___SyncStubReferencesRequest = SyncStubReferencesRequest

@typing.final
class SyncStubReferencesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___SyncStubReferencesResponse = SyncStubReferencesResponse
